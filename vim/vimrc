set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smarttab
set showcmd
set showmode
set showmatch
set hlsearch
set incsearch
set ignorecase
set smartcase
set autoindent
set textwidth=119
set formatoptions=c
set ruler
set number relativenumber
set nocompatible
set mouse=a
set laststatus=2
set encoding=utf-8
filetype plugin indent on
syntax on

" vim-only fix for mouse scrolling in alacritty
if !has('nvim')
    set ttymouse=sgr
endif

" set cursorline
set autochdir
set noerrorbells

" set visualbell
set hidden
set winheight=999

" global undo
set undofile
if has('nvim')
    set undodir=/tmp/nvim-undo-$USER
    autocmd VimEnter * silent !mkdir -p /tmp/nvim-undo-$USER
else
    set undodir=/tmp/vim-undo-$USER
    autocmd VimEnter * silent !mkdir -p /tmp/vim-undo-$USER
endif

" vim-plug
if empty(glob('$HOME/.vim/autoload/plug.vim'))
    silent !curl -fLo $HOME/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin('$HOME/.vim/plugged')
    Plug 'majutsushi/tagbar'
    Plug 'vim-airline/vim-airline'
    Plug 'morhetz/gruvbox'
    Plug 'LunarWatcher/auto-pairs'
    Plug 'airblade/vim-gitgutter'
    Plug 'prabirshrestha/vim-lsp'
    Plug 'mattn/vim-lsp-settings'
    Plug 'prabirshrestha/asyncomplete.vim'
    Plug 'prabirshrestha/asyncomplete-lsp.vim'
call plug#end()

" gruvbox theme
let g:gruvbox_italic=1
let g:gruvbox_contrast_dark='hard'
colorscheme gruvbox
set background=dark
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    if &t_Co >= 256
        set termguicolors
    endif
endif
hi Normal guibg=NONE ctermbg=NONE

" directory tree
map <F2> :10Lexplore<CR>

" tagbar
map <F3> :TagbarToggle<CR>

" quick paste
if has('nvim')
    map <F4> :set paste!<CR>
else
    set pastetoggle=<F4>
endif

" close all the other tabs
map <F5> :%bd\|e#\|bd#<CR>

" 80 chars and 120 chars limit
autocmd FileType * setlocal colorcolumn=80,120

" Convenient buffer mgmt
set wildchar=<Tab> wildmenu wildmode=full
set wildcharm=<C-Z>
nnoremap gb :ls<CR>:b<Space>

" quick close of current tab
command! Bd bp|bd #

" No arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Move by displayed lines
nnoremap j gj
nnoremap k gk
nnoremap J 10gj
nnoremap K 10gk

" Unset highlight after search
nnoremap <silent> <CR> :noh<CR><CR>

" Unlock delete
:set backspace=indent,eol,start

" Ctags
set tags=tags;/

" Buffer line
nnoremap <silent> <C-N> :bnext<CR>
nnoremap <silent> <C-P> :bprev<CR>
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_symbols_ascii = 1

" Folding
set foldmethod=marker

" Spaces at EOL
match Search '\s\+$'

" Netrw
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_keepdir = 0
autocmd WinEnter * if winnr('$') == 1 &&
    \ getbufvar(winbufnr(1), "&filetype") == "netrw" | qa | endif

" Garbage collection (not really)
autocmd VimEnter * redraw!

" LSP
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> g[ <plug>(lsp-previous-diagnostic)
    nmap <buffer> g] <plug>(lsp-next-diagnostic)
    nmap <buffer> gk <plug>(lsp-hover)
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" Async complete
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
let g:asyncomplete_auto_popup = 0
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction
inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ asyncomplete#force_refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
